#lang racket

(require "core.rkt")

(provide x86-register-allocation x86-transform x86-asm-write-flat x86-asm-flatten x86-asm-add-mitigation)

(define x86-registers
  '(eax ; return register
    (eax ebx ecx edx esi edi))) ; all general-purpose registers

(define x86-output-prerules `(
                              (()
                               (pushall)
                               (seq))
                              ((h r)
                               (pushall h . r)
                               (seq
                                (pushone h)
                                (pushall . r)))
                              ((f a)
                               (reg eax (call f . a))
                               (seq
                                (pushall . a)
                                (call f)
                                (add esp ,(lambda (f a) (* 4 (length a))))))
                              ((r)
                               (pushone (reg r))
                               (push r))
                              ((r n)
                               (reg r (arg n))
                               (mov r (mem ebp ,(lambda (r n) (* (+ n 2) 4)))))
                              ((r)
                               (reg r (reg r))
                               (seq))
                              ((ro ri)
                               (reg ro (reg ri))
                               (mov ro ri))
                              ((ro ri cst)
                               (reg ro (<= (reg ri) (const cst u4)))
                               (seq
                                (cmp ri (dword cst))
                                (setbe (reg-low-byte ro))
                                (movzx ro (reg-low-byte ro))))
                              ((ro ra rb)
                               (reg ro (<= (reg ra) (reg rb)))
                               (seq
                                (cmp ra rb)
                                (setbe (reg-low-byte ro))
                                (movzx ro (reg-low-byte ro))))
                              ((r cst)
                               (reg r (+ (reg r) (const cst u4)))
                               (add r (dword cst)))
                              ((ro ri)
                               (reg ro (+ (reg ro) (reg ri)))
                               (add ro ri))
                              ((ro ri)
                               (reg ro (+ (reg ri) (reg ro)))
                               (add ro ri))
                              ((ro ri cst)
                               (reg ro (+ (reg ri) (const cst u4)))
                               (seq
                                (mov ro ri)
                                (add ro (dword cst))))
                              ((r cst)
                               (reg r (- (reg r) (const cst u4)))
                               (sub r (dword cst)))
                              ((ro ri)
                               (reg ro (- (reg ro) (reg ri)))
                               (sub ro ri))
                              ((ro ri)
                               (reg ro (- (reg ri) (reg ro)))
                               (sub ro ri))
                              ((ro ri cst)
                               (reg ro (- (reg ri) (const cst u4)))
                               (seq
                                (mov ro ri)
                                (sub ro (dword cst))))
                              (()
                               (reg-low-byte eax)
                               al)
                              ((cond true false)
                               (branch (reg cond) true false)
                               (seq
                                (cmp cond 0)
                                (jne true)
                                (jmp false)))
                              ((r cst)
                               (reg r (const cst u4))
                               (mov r (dword cst)))
                              (()
                               (return (reg eax))
                               (ret))
                              ))
(define x86-output '(((label x) "global " x "\n" x ":")
                     ((local x) ".lab" x ":")
                     ((mov dst src) "  mov " dst ", " src)
                     ((cmp a b) "  cmp " a ", " b)
                     ((jle tgt) "  jle " ".lab" tgt)
                     ((jge tgt) "  jge " ".lab" tgt)
                     ((jl tgt) "  jl " ".lab" tgt)
                     ((jg tgt) "  jg " ".lab" tgt)
                     ((je tgt) "  je " ".lab" tgt)
                     ((jne tgt) "  jne " ".lab" tgt)
                     ((jmp tgt) "  jmp " ".lab" tgt)
                     ((ret) "  jmp .labexit")
                     ((ret-real) "  ret")
                     ((add dst src) "  add " dst ", " src)
                     ((sub dst src) "  sub " dst ", " src)
                     ((push val) "  push " val)
                     ((pop val) "  pop " val)
                     ((call name) "  call " name)
                     ((mem x) "[" x "]")
                     ((mem x p) "[" x "+" p "]")
                     ((dword x) "dword " x)
                     ((setbe x) "  setbe " x)
                     ((movzx dst src) "  movzx " dst ", " src)
                     ))

; modifiable: eax, ecx, edx
; registers: eax, ebx, ecx, edx, esp, ebp, esi, edi
; can use: eax, ebx, ecx, edx, ebp, esi, edi
(define (x86-register-allocation code)
  (register-allocation x86-registers code))

(define (x86-transform code)
  (tree-transform code x86-output-prerules))

(define (x86-asm-flatten code)
  (flatten-labels code))

(define (x86-asm-write-flat code)
  (asm-write-flat x86-output code))

(define (mitigate reg)
  (list 'push reg))

(define (unmitigate reg)
  (list 'pop reg))

(define (x86-asm-add-mitigation regs code)
  (append (list (car code)) ; function header
          (list '(push ebp) '(mov ebp esp))
          (map mitigate regs)
          (cdr code)
          (list (list 'local "exit"))
          (map unmitigate (reverse regs))
          (list '(pop ebp))
          (list (list 'ret-real))))
